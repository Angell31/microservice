name: Docker Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Enable manual trigger
  workflow_dispatch:

jobs:
  find-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfile_dirs: ${{ steps.find-dirs.outputs.dockerfile_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Dockerfile directories
        id: find-dirs
        run: |
          DIRS=$(find . -name Dockerfile -exec dirname {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "dockerfile_dirs=$DIRS" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles in: $DIRS"

  scan-and-build:
    needs: find-dockerfiles
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.find-dockerfiles.outputs.dockerfile_dirs) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.37.3

      - name: Generate image name
        id: image-name
        run: |
          # Remove leading ./ and replace / with - for image naming
          IMAGE_NAME=$(echo "${{ matrix.directory }}" | sed 's/^\.\///' | sed 's/\//-/g')
          echo "name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Image name will be: $IMAGE_NAME"

      - name: Scan Dockerfile
        id: scan-dockerfile
        continue-on-error: true
        run: |
          echo "Scanning Dockerfile in ${{ matrix.directory }}"
          mkdir -p scan-results
          trivy config --vuln-type os,library --severity HIGH,CRITICAL --format json "${{ matrix.directory }}/Dockerfile" > scan-results/dockerfile-scan.json || true
          VULN_COUNT=$(jq -r '.Results[] | if .Vulnerabilities then .Vulnerabilities | length else 0 end' scan-results/dockerfile-scan.json | jq -s add)
          echo "Found $VULN_COUNT vulnerabilities in Dockerfile"
          echo "dockerfile_vulns=$VULN_COUNT" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build-image
        run: |
          echo "Building Docker image from ${{ matrix.directory }}/Dockerfile"
          docker build -t "${{ steps.image-name.outputs.name }}:latest" "${{ matrix.directory }}"

      - name: Scan Docker image
        id: scan-image
        continue-on-error: true
        run: |
          echo "Scanning Docker image ${{ steps.image-name.outputs.name }}:latest"
          mkdir -p scan-results
          trivy image --severity HIGH,CRITICAL --format json "${{ steps.image-name.outputs.name }}:latest" > scan-results/image-scan.json || true
          VULN_COUNT=$(jq -r '.Results[] | if .Vulnerabilities then .Vulnerabilities | length else 0 end' scan-results/image-scan.json | jq -s add)
          echo "Found $VULN_COUNT vulnerabilities in Docker image"
          echo "image_vulns=$VULN_COUNT" >> $GITHUB_OUTPUT

      - name: Generate report for this context
        run: |
          mkdir -p reports
          {
            echo "# Security Report for ${{ matrix.directory }}"
            echo "## Dockerfile Scan Results"
            echo "- **Vulnerabilities found:** ${{ steps.scan-dockerfile.outputs.dockerfile_vulns || 0 }}"
            echo
            echo "## Docker Image Scan Results"
            echo "- **Image name:** ${{ steps.image-name.outputs.name }}"
            echo "- **Vulnerabilities found:** ${{ steps.scan-image.outputs.image_vulns || 0 }}"
          } > "reports/${{ steps.image-name.outputs.name }}-report.md"

      - name: Upload individual scan report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.image-name.outputs.name }}-scan-report
          path: reports/${{ steps.image-name.outputs.name }}-report.md

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.image-name.outputs.name }}-scan-results
          path: scan-results/

  aggregate-reports:
    needs: scan-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download all scan reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports
          pattern: '*-scan-report'
          merge-multiple: true

      - name: Combine reports
        run: |
          {
            echo "# Docker Security Scan Summary Report"
            echo "## Scan completed at: $(date)"
            echo
            echo "## Individual Service Reports"
            echo
            
            # List all report files and include their contents
            for report in all-reports/*-report.md; do
              echo "---"
              cat "$report"
              echo
            done
          } > combined-security-report.md

      - name: Upload combined report
        uses: actions/upload-artifact@v4
        with:
          name: combined-security-report
          path: combined-security-report.md