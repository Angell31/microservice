name: Dockerfile & Image Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to get all folders containing Dockerfiles
  get-folders:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.get_folders.outputs.folders }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Get list of folders with Dockerfiles
        id: get_folders
        run: |
          # Find all directories containing Dockerfiles
          echo "Looking for Dockerfiles in the repository..."
          
          # Check if src directory exists
          if [ ! -d "src" ]; then
            echo "Warning: 'src' directory not found. Searching in the entire repository."
            folders=$(find . -type f -name "Dockerfile" -not -path "*/\.*" -exec dirname {} \; | sort -u)
          else
            folders=$(find src -type f -name "Dockerfile" -exec dirname {} \; | sort -u)
          fi
          
          # Debug: Show what folders were found
          echo "Found Dockerfiles in these folders:"
          echo "$folders"
          
          # Handle case when no Dockerfiles are found
          if [ -z "$folders" ]; then
            echo "No Dockerfiles found. Setting empty array as output."
            echo "folders=[]" >> $GITHUB_OUTPUT
          else
            # Format the list as a JSON array - using a more explicit approach
            echo "$folders" > temp_folders.txt
            folder_json=$(jq -R -s 'split("\n") | map(select(length > 0))' temp_folders.txt)
            
            # Debug: Show JSON output
            echo "JSON array generated:"
            echo "$folder_json"
            
            echo "folders=$folder_json" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify output format
        run: |
          echo "Output value is:"
          echo "${{ steps.get_folders.outputs.folders }}"
          
          # Validate if it's a proper JSON
          echo "${{ steps.get_folders.outputs.folders }}" > test_json.txt
          if jq empty test_json.txt 2>/dev/null; then
            echo "✅ Output is valid JSON"
          else
            echo "❌ Output is NOT valid JSON"
            echo "Providing default empty array"
            echo "folders=[]" >> $GITHUB_OUTPUT
          fi

  # Use a fallback approach for matrix jobs
  scan-dockerfile:
    runs-on: ubuntu-latest
    needs: get-folders
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Parse folders and run scan
        run: |
          # Get the folders output and handle empty cases
          FOLDERS='${{ needs.get-folders.outputs.folders }}'
          
          # If empty or invalid, use default empty array
          if [ -z "$FOLDERS" ] || [ "$FOLDERS" = "" ]; then
            echo "No valid folders found. Setting default."
            FOLDERS='[]'
          fi
          
          echo "Folders to process: $FOLDERS"
          
          # Parse and process each folder
          if [ "$FOLDERS" != "[]" ]; then
            echo "$FOLDERS" | jq -c '.[]' | while read -r folder; do
              # Remove quotes from the folder path
              folder=$(echo $folder | sed 's/"//g')
              echo "Processing folder: $folder"
              
              if [ -f "$folder/Dockerfile" ]; then
                echo "Scanning Dockerfile in $folder"
                trivy config --severity HIGH,CRITICAL "$folder/Dockerfile" || true
              else
                echo "Dockerfile not found in $folder"
              fi
            done
          else
            echo "No folders to process"
          fi

  # Similar approach for other jobs
  build-image:
    runs-on: ubuntu-latest
    needs: scan-dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Parse folders and build images
        run: |
          # Get the folders output and handle empty cases
          FOLDERS='${{ needs.get-folders.outputs.folders }}'
          
          # If empty or invalid, use default empty array
          if [ -z "$FOLDERS" ] || [ "$FOLDERS" = "" ]; then
            echo "No valid folders found. Skipping build."
            exit 0
          fi
          
          echo "Folders to process: $FOLDERS"
          
          # Parse and process each folder
          if [ "$FOLDERS" != "[]" ]; then
            echo "$FOLDERS" | jq -c '.[]' | while read -r folder; do
              # Remove quotes from the folder path
              folder=$(echo $folder | sed 's/"//g')
              echo "Building image for folder: $folder"
              
              if [ -f "$folder/Dockerfile" ]; then
                image_name="my-app-image-$(echo "$folder" | sed 's/\//-/g')"
                echo "Building image: $image_name"
                docker build -t "$image_name" "$folder"
              else
                echo "Dockerfile not found in $folder"
              fi
            done
          else
            echo "No folders to process"
          fi

  scan-image:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Parse folders and scan images
        run: |
          # Get the folders output and handle empty cases
          FOLDERS='${{ needs.get-folders.outputs.folders }}'
          
          # If empty or invalid, use default empty array
          if [ -z "$FOLDERS" ] || [ "$FOLDERS" = "" ]; then
            echo "No valid folders found. Skipping scan."
            exit 0
          fi
          
          echo "Folders to process: $FOLDERS"
          
          # Parse and process each folder
          if [ "$FOLDERS" != "[]" ]; then
            echo "$FOLDERS" | jq -c '.[]' | while read -r folder; do
              # Remove quotes from the folder path
              folder=$(echo $folder | sed 's/"//g')
              image_name="my-app-image-$(echo "$folder" | sed 's/\//-/g')"
              
              echo "Scanning image: $image_name"
              trivy image --severity HIGH,CRITICAL "$image_name" || true
            done
          else
            echo "No folders to process"
          fi